plugins {
    id 'java'
    id 'java-test-fixtures'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.salonhub.api'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', '1.0.0-M7')
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    // --- Main ---
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    
    // Spring Boot Actuator for health checks
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Swagger / OpenAPI (for Spring Boot 3.4.5)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    
    // AWS
    implementation 'software.amazon.awssdk:dynamodb:2.20.0'
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.12.533'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Security & JWT
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // --- Test Fixtures ---
    testFixturesImplementation 'org.springframework.boot:spring-boot-starter-test'
    testFixturesImplementation "org.springframework.boot:spring-boot-starter-jdbc"
    testFixturesImplementation 'org.testcontainers:junit-jupiter'
    testFixturesImplementation 'org.testcontainers:postgresql'
    testFixturesImplementation 'org.flywaydb:flyway-core'

    // Allow tests to use testFixtures classes
    testImplementation testFixtures(project(":"))

    // --- Runtime dependencies ---
    runtimeOnly 'com.h2database:h2'

    // --- Unit tests ---
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // --- Integration tests ---
    integrationTestImplementation 'org.testcontainers:junit-jupiter'
    integrationTestImplementation 'org.testcontainers:postgresql'
    integrationTestImplementation 'com.h2database:h2'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.4.5"
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integration/java')
        resources.srcDir file('src/integration/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter tasks.test
}

tasks.named('check') {
    dependsOn tasks.integrationTest
}

// Remove the circular dependency - let check control the order
// tasks.named('test') {
//     dependsOn tasks.named('integrationTest')
// }